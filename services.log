Services:
=========

A Kubernetes Service is an abstraction which defines a logical set of Pods and a policy by which to access them - sometimes called a micro-service. 

The set of Pods targeted by a Service is (usually) determined by a Label Selector (see below for why you might want a Service without a selector).

kind: Service
apiVersion: v1
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 9376
    
    
Virtual IPs and service proxies:
================================

Every node in a Kubernetes cluster runs a kube-proxy. 
kube-proxy is responsible for implementing a form of virtual IP for Services of type other than ExternalName.   

DNS:
====

Kubernetes DNS schedules a DNS Pod and Service on the cluster, and configures the kubelets to tell individual containers to use the DNS Service’s IP to resolve DNS names

Every Service defined in the cluster (including the DNS server itself) is assigned a DNS name. 
By default, a client Pod’s DNS search list will include the Pod’s own namespace and the cluster’s default domain. 

Assume a Service named foo in the Kubernetes namespace bar. 
A Pod running in namespace bar can look up this service by simply doing a DNS query for foo. 
A Pod running in namespace quux can look up this service by doing a DNS query for foo.bar.


Services:
A records:
my-svc.my-namespace.svc.cluster.local

SRV Records:
_my-port-name._my-port-protocol.my-svc.my-namespace.svc.cluster.local

Pods:
A Records:
pod-ip-address.my-namespace.pod.cluster.local

Ingress:
========

An API object that manages external access to the services in a cluster, typically HTTP.
Ingress can provide load balancing, SSL termination and name-based virtual hosting.


Terminology:
------------

For the sake of clarity, this guide defines the following terms:

    Node: A single virtual or physical machine in a Kubernetes cluster.
    Cluster: A group of nodes firewalled from the internet, that are the primary compute resources managed by Kubernetes.
    Edge router: A router that enforces the firewall policy for your cluster. This could be a gateway managed by a cloud provider or a physical piece of hardware.
    Cluster network: A set of links, logical or physical, that facilitate communication within a cluster according to the Kubernetes networking model.
    Service: A Kubernetes Service that identifies a set of pods using label selectors. Unless mentioned otherwise, Services are assumed to have virtual IPs only routable within the cluster network.

What is Ingress?

Ingress, added in Kubernetes v1.1, exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. 
Traffic routing is controlled by rules defined on the Ingress resource.

    internet
        |
   [ Ingress ]
   --|-----|--
   [ Services ]

Types of Ingress:

    Single Service Ingress
    Simple fanout
    Name based virtual hosting










